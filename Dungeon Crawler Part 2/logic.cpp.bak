#include <iostream>
#include <fstream>
#include <string>
#include "logic.h"

using std::cout, std::endl, std::ifstream, std::string;

/**
 * TODO: Student implement this function
 * Load representation of the dungeon level from file into the 2D map.
 * Calls createMap to allocate the 2D array.
 * @param   fileName    File name of dungeon level.
 * @param   maxRow      Number of rows in the dungeon table (aka height).
 * @param   maxCol      Number of columns in the dungeon table (aka width).
 * @param   player      Player object by reference to set starting position.
 * @return  pointer to 2D dynamic array representation of dungeon map with player's location., or nullptr if loading fails for any reason
 * @updates  maxRow, maxCol, player
 */
char** loadLevel(const string& fileName, int& maxRow, int& maxCol, Player& player) {
	ifstream inFS(fileName);
	
	if(!inFS.is_open()){
		return nullptr;
	}
	else{
		inFS >> maxRow;
		inFS >> maxCol;
		inFS >> player.row; 
		inFS >> player.col;
		
		char** level = createMap(maxRow,maxCol);
		for(int i = 0; i<maxRow; ++i){
			for(int j = 0; j<maxCol; ++j){
				inFS >> level[i][j];
				level[player.row][player.col] = TILE_PLAYER;
			}
		}
		return level;
		
	}
}

/**
 * TODO: Student implement this function
 * Translate the character direction input by the user into row or column change.
 * That is, updates the nextRow or nextCol according to the player's movement direction.
 * @param   input       Character input by the user which translates to a direction.
 * @param   nextRow     Player's next row on the dungeon map (up/down).
 * @param   nextCol     Player's next column on dungeon map (left/right).
 * @updates  nextRow, nextCol
 */


void getDirection(char input, int& nextRow, int& nextCol) {
	if(input == MOVE_UP){
		--nextRow;
	}
	else if(input == MOVE_DOWN){
		++nextRow;
	}
	else if(input == MOVE_LEFT){
		++nextCol;
	}
	else if(input == MOVE_RIGHT){
		--nextCol;
	}
}

/**
 * TODO: [suggested] Student implement this function
 * Allocate the 2D map array.
 * Initialize each cell to TILE_OPEN.
 * @param   maxRow      Number of rows in the dungeon table (aka height).
 * @param   maxCol      Number of columns in the dungeon table (aka width).
 * @return  2D map array for the dungeon level, holds char type.
 */
char** createMap(int maxRow, int maxCol) {
	char** dungeon = new char*[maxRow];
	
	for(int i = 0; i<maxRow; ++i){
		dungeon[i] = new char[maxCol];
		for(int j = 0; j<maxCol; ++j){
			dungeon[i][j] = TILE_OPEN;
		}
	}
    return dungeon;
}

/**
 * TODO: Student implement this function
 * Deallocates the 2D map array.
 * @param   map         Dungeon map.
 * @param   maxRow      Number of rows in the dungeon table (aka height).
 * @return None
 * @update map, maxRow
 */
 
//completed
void deleteMap(char**& map, int& maxRow) {
	if (map) {
        for (int row = 0; row < maxRow; row++) {
            delete[] map[row];
        }
        delete[] map;
    }
	map = nullptr;
	maxRow = 0;
}

/**
 * TODO: Student implement this function
 * Resize the 2D map by doubling both dimensions.
 * Copy the current map contents to the right, diagonal down, and below.
 * Do not duplicate the player, and remember to avoid memory leaks!
 * You can use the STATUS constants defined in logic.h to help!
 * @param   map         Dungeon map.
 * @param   maxRow      Number of rows in the dungeon table (aka height), to be doubled.
 * @param   maxCol      Number of columns in the dungeon table (aka width), to be doubled.
 * @return  pointer to a dynamically-allocated 2D array (map) that has twice as many columns and rows in size.
 * @update maxRow, maxCol
 */
char** resizeMap(char** map, int& maxRow, int& maxCol) {
	int new_maxRow;
    int new_maxCol;
	//doubling both dimensions
	new_maxCol = maxCol*2;
	new_maxRow = maxRow*2; 
	//return nullptr if map is nullptr
	if (map == nullptr){
        return nullptr;
    }
	// New map is created (to be resized) and memory is allocated to the new map
    char** map_resize = new char*[new_maxRow]; 
    for (int row = 0; row < new_maxRow; ++row){
        map_resize[row] = new char[new_maxCol];
        if (row < maxRow) {
            for (int col = 0; col < maxCol; ++col){
                map_resize[row][col] = map[row][col];
            }
        }
    }
	
    // Set the player tiles to open tiles then copy this map to the resized map
    for (int row = 0; row < maxRow; ++row){
        for (int col = 0; col < maxCol; ++col){
            if (map[row][col] == TILE_PLAYER){ 
                map_resize[row + maxRow][col] = TILE_OPEN;
                map_resize[row][col + maxCol] = TILE_OPEN;
                map_resize[row+ maxRow][col + maxCol] = TILE_OPEN;
            }
			else if (map[row][col] != TILE_PLAYER){
                map_resize[row + maxRow][col] = map[row][col];
                map_resize[row][col + maxCol] = map[row][col];
                map_resize[row + maxRow][col + maxCol] = map[row][col];
            }
        }
    }

    if (map != nullptr) {
        deleteMap(map, maxRow);
    }
	maxCol = new_maxCol;
    maxRow = new_maxRow; 

    return map_resize;
}

/**
 * TODO: Student implement this function
 * Checks if the player can move in the specified direction and performs the move if so.
 * Cannot move out of bounds or onto TILE_PILLAR or TILE_MONSTER.
 * Cannot move onto TILE_EXIT without at least one treasure. 
 * If TILE_TREASURE, increment treasure by 1.
 * Remember to update the map tile that the player moves onto and return the appropriate status.
 * You can use the STATUS constants defined in logic.h to help!
 * @param   map         Dungeon map.
 * @param   maxRow      Number of rows in the dungeon table (aka height).
 * @param   maxCol      Number of columns in the dungeon table (aka width).
 * @param   player      Player object to by reference to see current location.
 * @param   nextRow     Player's next row on the dungeon map (up/down).
 * @param   nextCol     Player's next column on dungeon map (left/right).
 * @return  Player's movement status after updating player's position.
 * @update map contents, player
 */
int doPlayerMove(char** map, int maxRow, int maxCol, Player& player, int nextRow, int nextCol) {

	if (nextRow>=maxRow || nextRow < 0){
        nextRow = player.row;
		nextCol = player.col;
        return STATUS_STAY;
    }
    if (nextCol>=maxCol || nextCol<0){
        nextRow = player.row;
		nextCol = player.col;
        return STATUS_STAY;
    }

    if (map[nextRow][nextCol] == TILE_EXIT){ 
        if (player.treasure >= 1) {
            map[player.row][player.col] = TILE_OPEN;
            map[nextRow][nextCol] = TILE_PLAYER;
            player.row = nextRow;
			player.col = nextCol;
            return STATUS_ESCAPE;
        }
        else {
            nextRow = player.row;
			nextCol = player.col;
            return STATUS_STAY;
        }
    }
    
	if (map[nextRow][nextCol] == TILE_PILLAR){ 
        nextRow = player.row;
		nextCol = player.col;
        return STATUS_STAY;
    }
	
    if (map[nextRow][nextCol] == TILE_MONSTER){
        nextRow = player.row;
		nextCol = player.col;
        return STATUS_STAY;
    }

    if (map[nextRow][nextCol] == TILE_DOOR){ 
        map[player.row][player.col] = TILE_OPEN;
        map[nextRow][nextCol] = TILE_PLAYER;
        player.row = nextRow;
		player.col = nextCol;
        return STATUS_LEAVE;
    }

    if (map[nextRow][nextCol] == TILE_AMULET){ 
        map[player.row][player.col] = TILE_OPEN;
        map[nextRow][nextCol] = TILE_PLAYER;
        player.row = nextRow;
		player.col = nextCol;
        return STATUS_AMULET;
    }
    if (map[nextRow][nextCol] == TILE_TREASURE){
        player.treasure+=1;
        map[player.row][player.col] = TILE_OPEN;
        map[nextRow][nextCol] = TILE_PLAYER;
        player.row = nextRow;
		player.col = nextCol;
        return STATUS_TREASURE;
    }
    if (map[nextRow][nextCol] == TILE_OPEN){
        map[player.row][player.col] = TILE_OPEN;
        map[nextRow][nextCol] = TILE_PLAYER;
        player.row = nextRow;
		player.col = nextCol;
        return STATUS_MOVE;
    }
}

/**
 * TODO: Student implement this function
 * Update monster locations:
 * We check up, down, left, right from the current player position.
 * If we see an obstacle, there is no line of sight in that direction, and the monster does not move.
 * If we see a monster before an obstacle, the monster moves one tile toward the player.
 * We should update the map as the monster moves.
 * At the end, we check if a monster has moved onto the player's tile.
 * @param   map         Dungeon map.
 * @param   maxRow      Number of rows in the dungeon table (aka height).
 * @param   maxCol      Number of columns in the dungeon table (aka width).
 * @param   player      Player object by reference for current location.
 * @return  Boolean value indicating player status: true if monster reaches the player, false if not.
 * @update map contents
 */
bool doMonsterAttack(char** map, int maxRow, int maxCol, const Player& player) {
    bool deadplayer;
	deadplayer = false;

	//right
    for (int right = player.col+1; right < maxCol; ++right){
        if (map[player.row][right] == TILE_MONSTER){
            map[player.row][right] = TILE_OPEN;
            map[player.row][right-1] = TILE_MONSTER;
        }
		if (map[player.row][right] == TILE_PILLAR){
            break;
        }
    }
	//left
    for (int left = player.col - 1; left >= 0; --left){
        if (map[player.row][left] == TILE_MONSTER){
            map[player.row][left] = TILE_OPEN;
            map[player.row][left+1] = TILE_MONSTER;
        }
		if (map[player.row][left] == TILE_PILLAR){
            break;
        }
    }
    //up
    for (int up = player.row-1; up>=0; --up){
		if (map[up][player.col] == TILE_MONSTER){
            map[up][player.col] = TILE_OPEN;
			map[up+1][player.col] = TILE_MONSTER;	
        }
		if (map[up][player.col] == TILE_PILLAR){
            break;
        }
    }
    //down
    for (int down = player.row + 1; down < maxRow; ++down){
		if (map[down][player.col] == TILE_MONSTER){
            map[down][player.col] = TILE_OPEN;
            map[down-1][player.col] = TILE_MONSTER;
        }
        if (map[down][player.col] == TILE_PILLAR){
            break;
        }
    }
	
	//if player lands on a monster, dead
	if(map[player.row][player.col] == TILE_MONSTER){
        deadplayer = true;
    }
   

    
	
    return deadplayer;
}

